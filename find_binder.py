import pandas as pd
from main import optimize_protein_sequence
from utils import reverse_translate

# Load test data
df = pd.read_csv('test-3.csv')

# Base sequence to append to
base = "CRRQQRSSTLYVLIFLAIFLSKFTNQLLLSLLEAVIRTVTTLQQLLT"

results = []
for _, row in df.iterrows():
    # Combine binder with base sequence
    full_seq = "M" + row['Binder'] + base
    
    # Run optimization
    try:
        # Reverse translate to DNA
        dna = reverse_translate(full_seq)
        result, errors, similar_switch, index = optimize_protein_sequence(
            """
        GGGTGGGACCCCTTTCGGGGTCCTGCTCAACTTCCTGTCGAGCTAATGCCATTTTTAATGTCTTTAGCGA
GACGCTACCATGGCTATCGCTGTAGGTAGCCGGAATTCCATTCCTAGGAGGTTTGACCTGTGCGAGCTTT
TAGTACCCTTGATAGGGAGAACGAGACCTTCGTCCCCTCCGTTCGCGTTTACGCGGACGGTGAGACTGAA
GATAACTCATTCTCTTTAAAATATCGTTCGAACTGGACTCCCGGTCGTTTTAACTCGACTGGGGCCAAAA
CGAAACAGTGGCACTACCCCTCTCCGTATTCACGGGGGGCGTTAAGTGTCACATCGATAGATCAAGGTGC
CTACAAGCGAAGTGGGTCATCGTGGGGTCGCCCGTACGAGGAGAAAGCCGGTTTCGGCTTCTCCCTCGAC
GCACGCTCCTGCTACAGCCTCTTCCCTGTAAGCCAAAACTTGACTTACATCGAAGTGCCGCAGAACGTTG
CGAACCGGGCGTCGACCGAAGTCCTGCAAAAGGTCACCCAGGGTAATTTTAACCTTGGTGTTGCTTTAGC
AGAGGCCAGGTCGACAGCCTCACAACTCGCGACGCAAACCATTGCGCTCGTGAAGGCGTACACTGCCGCT
CGTCGCGGTAATTGGCGCCAGGCGCTCCGCTACCTTGCCCTAAACGAAGATCGAAAGTTTCGATCAAAAC
ACGTGGCCGGCAGGTGGTTGGAGTTGCAGTTCGGTTGGTTACCACTAATGAGTGATATCCAGGGTGCATA
TGAGATGCTTACGAAGGTTCACCTTCAAGAGTTTCTTCCTATGAGAGCCGTACGTCAGGTCGGTACTAAC
ATCAAGTTAGATGGCCGTCTGTCGTATCCAGCTGCAAACTTCCAGACAACGTGCAACATATCGCGACGTA
TCGTGATATGGTTTTACATAAACGATGCACGTTTGGCATGGTTGTCGTCTCTAGGTATCTTGAACCCACT
AGGTATAGTGTGGGAAAAGGTGCCTTTCTCATTCGTTGTCGACTGGCTCCTACCTGTAGGTAACATGCTC
GAGGGCCTTACGGCCCCCGTGGGATGCTCCTACATGTCAGGAACAGTTACTGACGTAATAACGGGTGAGT
CCATCATAAGCGTTGACGCTCCCTACGGGTGGACTGTGGAGAGACAGGGCACTGCTAAGGCCCAAATCTC
AGCCATGCATCGAGGGGTACAATCCGTATGGCCAACAACTGGCGCGTACGTAAAGTCTCCTTTCTCGATG
GTCCATACCTTAGATGCGTTAGCATTAATCAGGCAACGGCTCTCTAGATAGAGCCCTCAACCGGAGTTTG
AAGCATGGCTTCTAACTTTACTCAGTTCGTTCTCGTCGACAATGGCGGAACTGGCGACGTGACTGTCGCC
CCAAGCAACTTCGCTAACGGGGTCGCTGAATGGATCAGCTCTAACTCGCGTTCACAGGCTTACAAAGTAA
CCTGTAGCGTTCGTCAGAGCTCTGCGCAGAATCGCAAATACACCATCAAAGTCGAGGTGCCTAAAGTGGC
AACCCAGACTGTTGGTGGTGTAGAGCTTCCTGTAGCCGCATGGCGTTCGTACTTAAATATGGAACTAACC
ATTCCAATTTTCGCTACGAATTCCGACTGCGAGCTTATTGTTAAGGCAATGCAAGGTCTCCTAAAAGATG
GAAACCCGATTCCCTCAGCAATCGCAGCAAACTCCGGCATCTACTAATAGACGCCGGCCATTCAAACATG
AGGATTACCCATGTCGAAGACAACAAAGAAGTTCAACTCTTTATGTATTGATCTTCCTCGCGATCTTTCT
CTCGAAATTTACCAATCAATTGCTTCTGTCGCTACTGGAAGCGGTGATCCGCACAGTGACGACTTTACAG
CAATTGCTTACTTAAGGGACGAATTGCTCACAAAGCATCCGACCTTAGGTTCTGGTAATGACGAGGCGAC
CCGTCGTACCTTAGCTATCGCTAAGCTACGGGAGGCGAATGGTGATCGCGGTCAGATAAATAGAGAAGGT
TTCTTACATGACAAATCCTTGTCATGGGATCCGGATGTTTTACAAACCAGCATCCGTAGCCTTATTGGCA
ACCTCCTCTCTGGCTACCGATCGTCGTTGTTTGGGCAATGCACGTTCTCCAACGGTGCTCCTATGGGGCA
CAAGTTGCAGGATGCAGCGCCTTACAAGAAGTTCGCTGAACAAGCAACCGTTACCCCCCGCGCTCTGAGA
GCGGCTCTATTGGTCCGAGACCAATGTGCGCCGTGGATCAGACACGCGGTCCGCTATAACGAGTCATATG
AATTTAGGCTCGTTGTAGGGAACGGAGTGTTTACAGTTCCGAAGAATAATAAAATAGATCGGGCTGCCTG
TAAGGAGCCTGATATGAATATGTACCTCCAGAAAGGGGTCGGTGCTTTCATCAGACGCCGGCTCAAATCC
GTTGGTATAGACCTGAATGATCAATCGATCAACCAGCGTCTGGCTCAGCAGGGCAGCGTAGATGGTTCGC
TTGCGACGATAGACTTATCGTCTGCATCCGATTCCATCTCCGATCGCCTGGTGTGGAGTTTTCTCCCACC
AGAGCTATATTCATATCTCGATCGTATCCGCTCACACTACGGAATCGTAGATGGCGAGACGATACGATGG
GAACTATTTTCCACAATGGGAAATGGGTTCACATTTGAGCTAGAGTCCATGATATTCTGGGCAATAGTCA
AAGCGACCCAAATCCATTTTGGTAACGCCGGAACCATAGGCATCTACGGGGACGATATTATATGTCCCAG
TGAGATTGCACCCCGTGTGCTAGAGGCACTTGCCTACTACGGTTTTAAACCGAATCTTCGTAAAACGTTC
GTGTCCGGGCTCTTTCGCGAGAGCTGCGGCGCGCACTTTTACCGTGGTGTCGATGTCAAACCGTTTTACA
TCAAGAAACCTGTTGACAATCTCTTCGCCCTGATGCTGATATTAAATCGGCTACGGGGTTGGGGAGTTGT
CGGAGGTATGTCAGATCCACGCCTCTATAAGGTGTGGGTACGGCTCTCCTCCCAGGTGCCTTCGATGTTC
TTCGGTGGGACGGACCTCGCTGCCGACTACTACGTAGTCAGCCCGCCTACGGCAGTCTCGGTATACACCA
AGACTCCGTACGGGCGGCTGCTCGCGGATACCCGTACCTCGGGTTTCCGTCTTGCTCGTATCGCTCGAGA
ACGCAAGTTCTTCAGCGAAAAGCACGACAGTGGTCGCTACATAGCGTGGTTCCATACTGGAGGTGAAATC
ACCGACAGCATGAAGTCCGCCGGCGTGCGCGTTATACGCACTTCGGAGTGGCTAACGCCGGTTCCCACAT
TCCCTCAGGAGTGTGGGCCAGCGAGCTCTCCTCGGTAGCTGACCGAGGGACCCCCGTAAACGGGGTGGGT
GTGCTCGAAAGAGCACGGGTGCGAAAGCGGTCCGGCTCCACCGAAAGGTGGGCGGGCTTCGGCCCAGGGA
CCTCCCCCTAAAGAGAGGACCCGGGATTCTCCCGATTTGGTAACTAGCTGCTTGGCTAGTTACCACCCA
""",
        1334,
        1727,
        1677,
        1905,
            dna
        )
    except Exception as e:
        print(f"Error optimizing {row['Binder']}: {e}")
        continue
    
    results.append({
        'Binder': row['Binder'],
        'Perplexity': row['Pseudo Perplexity'],
        'Full Sequence': full_seq,
        'DNA': dna,
        'Optimized DNA': result,
        'Errors': errors,
        'Similar Switch': similar_switch,
    })

# Try to load existing results first
try:
    existing_df = pd.read_csv('binder_results.csv')
    results_df = pd.DataFrame(results)
    # Combine existing and new results
    combined_df = pd.concat([existing_df, results_df], ignore_index=True)
    # Drop duplicates based on Binder sequence
    combined_df = combined_df.drop_duplicates(subset=['Binder'], keep='last')
    # Sort by errors
    combined_df = combined_df.sort_values('Errors')
    # Save combined results
    combined_df.to_csv('binder_results.csv', index=False)
    print("\nTop 5 sequences with lowest errors (including previous results):")
    print(combined_df[['Binder', 'Perplexity', 'Errors']].head())
except FileNotFoundError:
    # If no existing file, create new one
    results_df = pd.DataFrame(results)
    results_df = results_df.sort_values('Errors')
    results_df.to_csv('binder_results.csv', index=False)
    print("\nTop 5 sequences with lowest errors:")
    print(results_df[['Binder', 'Perplexity', 'Errors']].head())
