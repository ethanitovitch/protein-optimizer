import pytest
from main import compare_codons, get_overlapping_indices, optimize_recursive, optimize_protein_sequence
from utils import reverse_translate

def test_reverse_translate():
    sequence = reverse_translate("NIQTRDLRERSGNALGLGVAVQTKFLKS")
    assert sequence == "AATATACAGACGAGGGATTTGAGGGAGAGGAGTGGGAATGCGTTGGGGTTGGGGGTGGCGGTGCAGACGAAGTTTTTGAAGAGT"

def test_get_first_overlapping_index():
    # Test when genes are aligned
    assert get_overlapping_indices(0, 0) == (0, 0)
    # Test when gene_b starts after gene_a
    assert get_overlapping_indices(0, 4) == (3, 4)
    assert get_overlapping_indices(0, 5) == (3, 5)
    assert get_overlapping_indices(0, 6) == (6, 6)
    # Test with non-zero gene_a_start
    assert get_overlapping_indices(10, 14) == (13, 14)
    assert get_overlapping_indices(10, 15) == (13, 15)
    assert get_overlapping_indices(10, 16) == (16, 16)


def test_compare_codons():
    # Test with offset -2 (codon_a last 2 chars = codon_b first 2 chars)
    assert compare_codons("ATG", "TGC", None, None, -2) is False
    assert compare_codons("ATG", "GGA", None, None, -2) is True
    
    # Test with offset -1 (codon_a last 1 char = codon_b first 1 char)
    assert compare_codons("ATG", "GCC", None, None, -1) is False
    assert compare_codons("ATG", "AAT", None, None, -1) is True
    
    # Test with offset 1 (codon_a last 2 chars = codon_b first 2 chars)
    assert compare_codons("ATG", "TGC", None, None, 1) is True
    assert compare_codons("ATG", "AGC", None, None, 1) is False
    
    # Test with offset 2 (codon_a last 1 char = codon_b first 1 char)
    assert compare_codons("ATG", "GCC", None, None, 2) is True
    assert compare_codons("ATG", "TCC", None, None, 2) is False


def test_compare_codons_with_constraints():
    assert compare_codons("ATG", "GAT", None, "G", -1) is True
    assert compare_codons("ATG", "GAT", None, "T", -1) is False

    assert compare_codons("ATG", "TGG", "A", None, 1) is True
    assert compare_codons("ATG", "TGG", "T", None, 1) is False

    assert compare_codons("GGA", "GAA", "G", None, 1) is True


def test_optimize_recursive_simple():
    # Simple test with offset -2
    result, errors, similar_switch, index = optimize_recursive("ATG", "GCC", None, None, -2)
    assert result == "ATG"
    assert errors == 0
    assert similar_switch == []
    
    # Simple test with offset -1
    result, errors, similar_switch, index = optimize_recursive("ATG", "GCC", None, None, -1, similar_enabled=False)
    assert result == "ATG"
    assert errors == 1
    assert similar_switch == []

    # Simple test with offset 1
    result, errors, similar_switch, index = optimize_recursive("ATG", "TGC", None, None, 1, similar_enabled=False)
    assert result == "ATGT"
    assert errors == 0
    assert similar_switch == []
    
    # Simple test with offset 2
    result, errors, similar_switch, index = optimize_recursive("ATG", "GCC", None, None, 2, similar_enabled=False)
    assert result == "ATGCG"
    assert errors == 0
    assert similar_switch == []
    
    # Test with keep_b=False
    result, errors, similar_switch, index = optimize_recursive("ATG", "GCC", None, None, -1, similar_enabled=False)
    assert result == "ATG"
    assert errors == 1
    assert similar_switch == []


def test_optimize_recursive_complex():
    # Complex test with offset -2
    result, errors, similar_switch, index = optimize_recursive("GGCAACCCGA", "GCATGGAAC", None, None, -2)
    assert result == "GGGAACCCGA"
    assert errors == 1
    assert similar_switch == []

    result, errors, similar_switch, index = optimize_recursive("CGTTATGTTA", "AAAGAACTA", None, None, -1)
    assert result == "AGGTATGTTA"
    assert errors == 2
    assert similar_switch == []

    result, errors, similar_switch, index = optimize_recursive("CATTTTCAGA", "ATGCGTACA", None, None, 1)
    assert result == "CATTTTCAGA"
    assert errors == 1
    assert similar_switch == [(1, 'neutral')]



def test_optimize_recursive_with_similar_amino_acids():
    # Test hydrophobic substitution (L -> I)
    result, errors, similar_switch, index = optimize_recursive("CTT", "ATT", None, None, 0)
    assert errors == 0 
    assert len(similar_switch) == 1
    assert similar_switch[0][1] == "hydrophobic"

def test_full_optimization():
    result, errors, similar_switch, index = optimize_protein_sequence(
        """
        GGGTGGGACCCCTTTCGGGGTCCTGCTCAACTTCCTGTCGAGCTAATGCCATTTTTAATGTCTTTAGCGA
GACGCTACCATGGCTATCGCTGTAGGTAGCCGGAATTCCATTCCTAGGAGGTTTGACCTGTGCGAGCTTT
TAGTACCCTTGATAGGGAGAACGAGACCTTCGTCCCCTCCGTTCGCGTTTACGCGGACGGTGAGACTGAA
GATAACTCATTCTCTTTAAAATATCGTTCGAACTGGACTCCCGGTCGTTTTAACTCGACTGGGGCCAAAA
CGAAACAGTGGCACTACCCCTCTCCGTATTCACGGGGGGCGTTAAGTGTCACATCGATAGATCAAGGTGC
CTACAAGCGAAGTGGGTCATCGTGGGGTCGCCCGTACGAGGAGAAAGCCGGTTTCGGCTTCTCCCTCGAC
GCACGCTCCTGCTACAGCCTCTTCCCTGTAAGCCAAAACTTGACTTACATCGAAGTGCCGCAGAACGTTG
CGAACCGGGCGTCGACCGAAGTCCTGCAAAAGGTCACCCAGGGTAATTTTAACCTTGGTGTTGCTTTAGC
AGAGGCCAGGTCGACAGCCTCACAACTCGCGACGCAAACCATTGCGCTCGTGAAGGCGTACACTGCCGCT
CGTCGCGGTAATTGGCGCCAGGCGCTCCGCTACCTTGCCCTAAACGAAGATCGAAAGTTTCGATCAAAAC
ACGTGGCCGGCAGGTGGTTGGAGTTGCAGTTCGGTTGGTTACCACTAATGAGTGATATCCAGGGTGCATA
TGAGATGCTTACGAAGGTTCACCTTCAAGAGTTTCTTCCTATGAGAGCCGTACGTCAGGTCGGTACTAAC
ATCAAGTTAGATGGCCGTCTGTCGTATCCAGCTGCAAACTTCCAGACAACGTGCAACATATCGCGACGTA
TCGTGATATGGTTTTACATAAACGATGCACGTTTGGCATGGTTGTCGTCTCTAGGTATCTTGAACCCACT
AGGTATAGTGTGGGAAAAGGTGCCTTTCTCATTCGTTGTCGACTGGCTCCTACCTGTAGGTAACATGCTC
GAGGGCCTTACGGCCCCCGTGGGATGCTCCTACATGTCAGGAACAGTTACTGACGTAATAACGGGTGAGT
CCATCATAAGCGTTGACGCTCCCTACGGGTGGACTGTGGAGAGACAGGGCACTGCTAAGGCCCAAATCTC
AGCCATGCATCGAGGGGTACAATCCGTATGGCCAACAACTGGCGCGTACGTAAAGTCTCCTTTCTCGATG
GTCCATACCTTAGATGCGTTAGCATTAATCAGGCAACGGCTCTCTAGATAGAGCCCTCAACCGGAGTTTG
AAGCATGGCTTCTAACTTTACTCAGTTCGTTCTCGTCGACAATGGCGGAACTGGCGACGTGACTGTCGCC
CCAAGCAACTTCGCTAACGGGGTCGCTGAATGGATCAGCTCTAACTCGCGTTCACAGGCTTACAAAGTAA
CCTGTAGCGTTCGTCAGAGCTCTGCGCAGAATCGCAAATACACCATCAAAGTCGAGGTGCCTAAAGTGGC
AACCCAGACTGTTGGTGGTGTAGAGCTTCCTGTAGCCGCATGGCGTTCGTACTTAAATATGGAACTAACC
ATTCCAATTTTCGCTACGAATTCCGACTGCGAGCTTATTGTTAAGGCAATGCAAGGTCTCCTAAAAGATG
GAAACCCGATTCCCTCAGCAATCGCAGCAAACTCCGGCATCTACTAATAGACGCCGGCCATTCAAACATG
AGGATTACCCATGTCGAAGACAACAAAGAAGTTCAACTCTTTATGTATTGATCTTCCTCGCGATCTTTCT
CTCGAAATTTACCAATCAATTGCTTCTGTCGCTACTGGAAGCGGTGATCCGCACAGTGACGACTTTACAG
CAATTGCTTACTTAAGGGACGAATTGCTCACAAAGCATCCGACCTTAGGTTCTGGTAATGACGAGGCGAC
CCGTCGTACCTTAGCTATCGCTAAGCTACGGGAGGCGAATGGTGATCGCGGTCAGATAAATAGAGAAGGT
TTCTTACATGACAAATCCTTGTCATGGGATCCGGATGTTTTACAAACCAGCATCCGTAGCCTTATTGGCA
ACCTCCTCTCTGGCTACCGATCGTCGTTGTTTGGGCAATGCACGTTCTCCAACGGTGCTCCTATGGGGCA
CAAGTTGCAGGATGCAGCGCCTTACAAGAAGTTCGCTGAACAAGCAACCGTTACCCCCCGCGCTCTGAGA
GCGGCTCTATTGGTCCGAGACCAATGTGCGCCGTGGATCAGACACGCGGTCCGCTATAACGAGTCATATG
AATTTAGGCTCGTTGTAGGGAACGGAGTGTTTACAGTTCCGAAGAATAATAAAATAGATCGGGCTGCCTG
TAAGGAGCCTGATATGAATATGTACCTCCAGAAAGGGGTCGGTGCTTTCATCAGACGCCGGCTCAAATCC
GTTGGTATAGACCTGAATGATCAATCGATCAACCAGCGTCTGGCTCAGCAGGGCAGCGTAGATGGTTCGC
TTGCGACGATAGACTTATCGTCTGCATCCGATTCCATCTCCGATCGCCTGGTGTGGAGTTTTCTCCCACC
AGAGCTATATTCATATCTCGATCGTATCCGCTCACACTACGGAATCGTAGATGGCGAGACGATACGATGG
GAACTATTTTCCACAATGGGAAATGGGTTCACATTTGAGCTAGAGTCCATGATATTCTGGGCAATAGTCA
AAGCGACCCAAATCCATTTTGGTAACGCCGGAACCATAGGCATCTACGGGGACGATATTATATGTCCCAG
TGAGATTGCACCCCGTGTGCTAGAGGCACTTGCCTACTACGGTTTTAAACCGAATCTTCGTAAAACGTTC
GTGTCCGGGCTCTTTCGCGAGAGCTGCGGCGCGCACTTTTACCGTGGTGTCGATGTCAAACCGTTTTACA
TCAAGAAACCTGTTGACAATCTCTTCGCCCTGATGCTGATATTAAATCGGCTACGGGGTTGGGGAGTTGT
CGGAGGTATGTCAGATCCACGCCTCTATAAGGTGTGGGTACGGCTCTCCTCCCAGGTGCCTTCGATGTTC
TTCGGTGGGACGGACCTCGCTGCCGACTACTACGTAGTCAGCCCGCCTACGGCAGTCTCGGTATACACCA
AGACTCCGTACGGGCGGCTGCTCGCGGATACCCGTACCTCGGGTTTCCGTCTTGCTCGTATCGCTCGAGA
ACGCAAGTTCTTCAGCGAAAAGCACGACAGTGGTCGCTACATAGCGTGGTTCCATACTGGAGGTGAAATC
ACCGACAGCATGAAGTCCGCCGGCGTGCGCGTTATACGCACTTCGGAGTGGCTAACGCCGGTTCCCACAT
TCCCTCAGGAGTGTGGGCCAGCGAGCTCTCCTCGGTAGCTGACCGAGGGACCCCCGTAAACGGGGTGGGT
GTGCTCGAAAGAGCACGGGTGCGAAAGCGGTCCGGCTCCACCGAAAGGTGGGCGGGCTTCGGCCCAGGGA
CCTCCCCCTAAAGAGAGGACCCGGGATTCTCCCGATTTGGTAACTAGCTGCTTGGCTAGTTACCACCCA
""",
        1334,
        1727,
        1677,
        1905,
        """ATGGCGTGGACCAGCATTTATGAACTGGATGCGCTGAACAACTGCCGTAAAGGTCAGCGCCAGGCCGTGGGCAGCAGCCGCCGCTGCCGCCGCCAGCAGCGTAGCAGCACCCTGTACGTGCTGATTTTTCTGGCGATTTTTCTGAGCAAATTTACCAACCAGCTGCTGCTGAGCCTGCTGGAAGCGGTGATTCGCACCGTGACCACCCTGCAGCAGCTGCTGACCTGA""",
        similar_enabled=False
    )
    assert result == "GATGGCAACCCGATCCCCTCAGCAATTGCAGCAAACTCCGGCATCTACTAAGGGTCAGCGCCAGGCCGTGGGCAGCAGCCGCCGCTGCCGCCGCCAGCAGCGTAGCAGCACCCTGTACGTGCTGATTTTTCTGGCGATTTTTCTGAGCAAATTTACCAACCAGCTGCTGCTGAGCCTGCTGGAAGCGGTGATTCGCACCGTGACCACCCTGCAGCAGCTGCTGACCTGA"
    assert errors == 12

    result, errors, similar_switch, index = optimize_protein_sequence(
        """
        GGGTGGGACCCCTTTCGGGGTCCTGCTCAACTTCCTGTCGAGCTAATGCCATTTTTAATGTCTTTAGCGA
GACGCTACCATGGCTATCGCTGTAGGTAGCCGGAATTCCATTCCTAGGAGGTTTGACCTGTGCGAGCTTT
TAGTACCCTTGATAGGGAGAACGAGACCTTCGTCCCCTCCGTTCGCGTTTACGCGGACGGTGAGACTGAA
GATAACTCATTCTCTTTAAAATATCGTTCGAACTGGACTCCCGGTCGTTTTAACTCGACTGGGGCCAAAA
CGAAACAGTGGCACTACCCCTCTCCGTATTCACGGGGGGCGTTAAGTGTCACATCGATAGATCAAGGTGC
CTACAAGCGAAGTGGGTCATCGTGGGGTCGCCCGTACGAGGAGAAAGCCGGTTTCGGCTTCTCCCTCGAC
GCACGCTCCTGCTACAGCCTCTTCCCTGTAAGCCAAAACTTGACTTACATCGAAGTGCCGCAGAACGTTG
CGAACCGGGCGTCGACCGAAGTCCTGCAAAAGGTCACCCAGGGTAATTTTAACCTTGGTGTTGCTTTAGC
AGAGGCCAGGTCGACAGCCTCACAACTCGCGACGCAAACCATTGCGCTCGTGAAGGCGTACACTGCCGCT
CGTCGCGGTAATTGGCGCCAGGCGCTCCGCTACCTTGCCCTAAACGAAGATCGAAAGTTTCGATCAAAAC
ACGTGGCCGGCAGGTGGTTGGAGTTGCAGTTCGGTTGGTTACCACTAATGAGTGATATCCAGGGTGCATA
TGAGATGCTTACGAAGGTTCACCTTCAAGAGTTTCTTCCTATGAGAGCCGTACGTCAGGTCGGTACTAAC
ATCAAGTTAGATGGCCGTCTGTCGTATCCAGCTGCAAACTTCCAGACAACGTGCAACATATCGCGACGTA
TCGTGATATGGTTTTACATAAACGATGCACGTTTGGCATGGTTGTCGTCTCTAGGTATCTTGAACCCACT
AGGTATAGTGTGGGAAAAGGTGCCTTTCTCATTCGTTGTCGACTGGCTCCTACCTGTAGGTAACATGCTC
GAGGGCCTTACGGCCCCCGTGGGATGCTCCTACATGTCAGGAACAGTTACTGACGTAATAACGGGTGAGT
CCATCATAAGCGTTGACGCTCCCTACGGGTGGACTGTGGAGAGACAGGGCACTGCTAAGGCCCAAATCTC
AGCCATGCATCGAGGGGTACAATCCGTATGGCCAACAACTGGCGCGTACGTAAAGTCTCCTTTCTCGATG
GTCCATACCTTAGATGCGTTAGCATTAATCAGGCAACGGCTCTCTAGATAGAGCCCTCAACCGGAGTTTG
AAGCATGGCTTCTAACTTTACTCAGTTCGTTCTCGTCGACAATGGCGGAACTGGCGACGTGACTGTCGCC
CCAAGCAACTTCGCTAACGGGGTCGCTGAATGGATCAGCTCTAACTCGCGTTCACAGGCTTACAAAGTAA
CCTGTAGCGTTCGTCAGAGCTCTGCGCAGAATCGCAAATACACCATCAAAGTCGAGGTGCCTAAAGTGGC
AACCCAGACTGTTGGTGGTGTAGAGCTTCCTGTAGCCGCATGGCGTTCGTACTTAAATATGGAACTAACC
ATTCCAATTTTCGCTACGAATTCCGACTGCGAGCTTATTGTTAAGGCAATGCAAGGTCTCCTAAAAGATG
GAAACCCGATTCCCTCAGCAATCGCAGCAAACTCCGGCATCTACTAATAGACGCCGGCCATTCAAACATG
AGGATTACCCATGTCGAAGACAACAAAGAAGTTCAACTCTTTATGTATTGATCTTCCTCGCGATCTTTCT
CTCGAAATTTACCAATCAATTGCTTCTGTCGCTACTGGAAGCGGTGATCCGCACAGTGACGACTTTACAG
CAATTGCTTACTTAAGGGACGAATTGCTCACAAAGCATCCGACCTTAGGTTCTGGTAATGACGAGGCGAC
CCGTCGTACCTTAGCTATCGCTAAGCTACGGGAGGCGAATGGTGATCGCGGTCAGATAAATAGAGAAGGT
TTCTTACATGACAAATCCTTGTCATGGGATCCGGATGTTTTACAAACCAGCATCCGTAGCCTTATTGGCA
ACCTCCTCTCTGGCTACCGATCGTCGTTGTTTGGGCAATGCACGTTCTCCAACGGTGCTCCTATGGGGCA
CAAGTTGCAGGATGCAGCGCCTTACAAGAAGTTCGCTGAACAAGCAACCGTTACCCCCCGCGCTCTGAGA
GCGGCTCTATTGGTCCGAGACCAATGTGCGCCGTGGATCAGACACGCGGTCCGCTATAACGAGTCATATG
AATTTAGGCTCGTTGTAGGGAACGGAGTGTTTACAGTTCCGAAGAATAATAAAATAGATCGGGCTGCCTG
TAAGGAGCCTGATATGAATATGTACCTCCAGAAAGGGGTCGGTGCTTTCATCAGACGCCGGCTCAAATCC
GTTGGTATAGACCTGAATGATCAATCGATCAACCAGCGTCTGGCTCAGCAGGGCAGCGTAGATGGTTCGC
TTGCGACGATAGACTTATCGTCTGCATCCGATTCCATCTCCGATCGCCTGGTGTGGAGTTTTCTCCCACC
AGAGCTATATTCATATCTCGATCGTATCCGCTCACACTACGGAATCGTAGATGGCGAGACGATACGATGG
GAACTATTTTCCACAATGGGAAATGGGTTCACATTTGAGCTAGAGTCCATGATATTCTGGGCAATAGTCA
AAGCGACCCAAATCCATTTTGGTAACGCCGGAACCATAGGCATCTACGGGGACGATATTATATGTCCCAG
TGAGATTGCACCCCGTGTGCTAGAGGCACTTGCCTACTACGGTTTTAAACCGAATCTTCGTAAAACGTTC
GTGTCCGGGCTCTTTCGCGAGAGCTGCGGCGCGCACTTTTACCGTGGTGTCGATGTCAAACCGTTTTACA
TCAAGAAACCTGTTGACAATCTCTTCGCCCTGATGCTGATATTAAATCGGCTACGGGGTTGGGGAGTTGT
CGGAGGTATGTCAGATCCACGCCTCTATAAGGTGTGGGTACGGCTCTCCTCCCAGGTGCCTTCGATGTTC
TTCGGTGGGACGGACCTCGCTGCCGACTACTACGTAGTCAGCCCGCCTACGGCAGTCTCGGTATACACCA
AGACTCCGTACGGGCGGCTGCTCGCGGATACCCGTACCTCGGGTTTCCGTCTTGCTCGTATCGCTCGAGA
ACGCAAGTTCTTCAGCGAAAAGCACGACAGTGGTCGCTACATAGCGTGGTTCCATACTGGAGGTGAAATC
ACCGACAGCATGAAGTCCGCCGGCGTGCGCGTTATACGCACTTCGGAGTGGCTAACGCCGGTTCCCACAT
TCCCTCAGGAGTGTGGGCCAGCGAGCTCTCCTCGGTAGCTGACCGAGGGACCCCCGTAAACGGGGTGGGT
GTGCTCGAAAGAGCACGGGTGCGAAAGCGGTCCGGCTCCACCGAAAGGTGGGCGGGCTTCGGCCCAGGGA
CCTCCCCCTAAAGAGAGGACCCGGGATTCTCCCGATTTGGTAACTAGCTGCTTGGCTAGTTACCACCCA
""",
        1334,
        1727,
        1677,
        1905,
        """ATGGCGTGGACCAGCATTTATGAACTGGATGCGCTGAACAACTGCCGTAAAGGTCAGCGCCAGGCCGTGGGCAGCAGCCGCCGCTGCCGCCGCCAGCAGCGTAGCAGCACCCTGTACGTGCTGATTTTTCTGGCGATTTTTCTGAGCAAATTTACCAACCAGCTGCTGCTGAGCCTGCTGGAAGCGGTGATTCGCACCGTGACCACCCTGCAGCAGCTGCTGACCTGA"""
    )
    assert result == "GATGGTAATCCGATCCCCAGTGCAATAGCAGCTAATTCAGGCATCTACTAGGGGTCAGCGCCAGGCCGTGGGCAGCAGCCGCCGCTGCCGCCGCCAGCAGCGTAGCAGCACCCTGTACGTGCTGATTTTTCTGGCGATTTTTCTGAGCAAATTTACCAACCAGCTGCTGCTGAGCCTGCTGGAAGCGGTGATTCGCACCGTGACCACCCTGCAGCAGCTGCTGACCTGA"
    assert errors == 7
